Problem:
"A number of Hawaiian adults and children are trying to get from Oahu to
Molokai. Unfortunately, they have only one boat which can carry maximally two
children or one adult (but not one child and one adult). The boat can be rowed
back to Oahu, but it requires a pilot to do so.

Arrange a solution to transfer everyone from Oahu to Molokai. You may assume
that there are at least two children.

Your solution must have no busy waiting, and it must eventually end. Note that it
is not necessary to terminate all the threads -- you can leave them blocked waiting
for a condition variable. The threads representing the adults and children cannot
have access to the numbers of threads that were created

The idea behind this task is to use independent threads to solve a problem. You
are to program the logic that a child or an adult would follow if that person were
in this situation. For example, it is reasonable to allow a person to see how many
children or adults are on the same island they are on. A person could see whether
the boat is at their island. A person can know which island they are on. All of this
information may be stored with each individual thread or in shared variables. So a
counter that holds the number of children on Oahu would be allowed, so long as
only threads that represent people on Oahu could access it.

What is not allowed is a thread which executes a "top-down" strategy for the
simulation. For example, you may not create threads for children and adults, then
have a controller thread simply send commands to them through communicators.
The threads must act as if they were individuals.

Information which is not possible in the real world is also not allowed. For
example, a child on Molokai cannot magically see all of the people on Oahu. That
child may remember the number of people that he or she has seen leaving, but the
child may not view people on Oahu as if it were there. (Assume that the people do
not have any technology other than a boat!)

You will reach a point in your simulation where the adult and child threads
believe that everyone is across on Molokai." - Boat Problem, Project 1 PDF

This solution:
In the boat problem, forked threads should run, until at least one thread believes they are finished.
They are to finish, when there are no threads left on Oahu, so threads need to keep a population count for Oahu.
To accomplish this, threads start by incrementing a global population counter, which is locked for atomic operations.
Then, threads need to wait for most of the other threads to finish incrementing the counter, so they sleep for some amount of time. Here, instead of waiting, any sort of block syncrhonization tool would work.
After waiting, adult threads yield, so that children can go first.
In an infinite loop, while checking that the population has not yet reached 0, they grab a lock for the boat, since only 1 thread may row at a time, and check conditions to see whether they may go.
The conditions fulfill the following:
	1. The thread and boat must be at the same island.
	2. Children take first priority to leave Oahu.
	3. A child must row the boat from Molokai, back to Oahu, unless finished.
	4. If there are any children on Oahu, adults must have their permission to take the boat. This permission is a global variable that children can set.
In the program, these conditions are checked with an logical if statement, rather than condition variables, but either would achieve the same.
Anytime a thread rows to Molokai, it decrements the population counter appropriately, so that other threads know to runnning.
After checking conditions and then acting, the threads then yield so another thread.
Our solution to the boat problem is not the fastest, but it is correct and achieved with only 2 locks.